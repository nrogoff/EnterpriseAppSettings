/*
Deployment script for EntAppSettingsDb

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "EntAppSettingsDb"
:setvar DefaultFilePrefix "EntAppSettingsDb"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                DATE_CORRELATION_OPTIMIZATION OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = AUTO, OPERATION_MODE = READ_WRITE, FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 30), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Creating [dbo].[AppSettingType]...';


GO
CREATE TABLE [dbo].[AppSettingType] (
    [AppSettingTypeId]          INT            IDENTITY (1, 1) NOT NULL,
    [AppSettingType]            NVARCHAR (50)  NOT NULL,
    [AppSettingTypeDescription] NVARCHAR (200) NULL,
    [ModifiedDate]              DATETIME       NOT NULL,
    [ModifiedBy]                NVARCHAR (50)  NOT NULL,
    PRIMARY KEY CLUSTERED ([AppSettingTypeId] ASC)
);


GO
PRINT N'Creating [dbo].[Tenant]...';


GO
CREATE TABLE [dbo].[Tenant] (
    [TenantId]          INT            IDENTITY (1, 1) NOT NULL,
    [TenantName]        NVARCHAR (100) NOT NULL,
    [TenantCode]        VARCHAR (30)   NULL,
    [TenantDescription] NVARCHAR (200) NULL,
    [ModifiedDate]      DATETIME       NOT NULL,
    [ModifiedBy]        NVARCHAR (50)  NOT NULL,
    PRIMARY KEY CLUSTERED ([TenantId] ASC)
);


GO
PRINT N'Creating [dbo].[AppSettingGroup_Audit]...';


GO
CREATE TABLE [dbo].[AppSettingGroup_Audit] (
    [AuditId]           BIGINT          IDENTITY (1, 1) NOT NULL,
    [AppSettingGroupId] INT             NOT NULL,
    [ParentGroupId]     INT             NULL,
    [Group]             VARCHAR (50)    NOT NULL,
    [Description]       NVARCHAR (1000) NULL,
    [ModifiedDate]      DATETIME        NOT NULL,
    [ModifiedBy]        NVARCHAR (50)   NOT NULL,
    CONSTRAINT [PK_AppSettingGroup_Audit] PRIMARY KEY CLUSTERED ([AuditId] ASC)
);


GO
PRINT N'Creating [dbo].[AppSettingSection_Audit]...';


GO
CREATE TABLE [dbo].[AppSettingSection_Audit] (
    [AuditId]             BIGINT          IDENTITY (1, 1) NOT NULL,
    [AppSettingSectionId] INT             NOT NULL,
    [ParentSectionId]     INT             NULL,
    [Section]             VARCHAR (50)    NOT NULL,
    [Description]         NVARCHAR (1000) NULL,
    [ModifiedDate]        DATETIME        NOT NULL,
    [ModifiedBy]          NVARCHAR (50)   NOT NULL,
    CONSTRAINT [PK_AppSettingSection_Audit] PRIMARY KEY CLUSTERED ([AuditId] ASC)
);


GO
PRINT N'Creating [dbo].[AppSetting_Audit]...';


GO
CREATE TABLE [dbo].[AppSetting_Audit] (
    [AuditId]          BIGINT          IDENTITY (1, 1) NOT NULL,
    [AppSettingId]     INT             NOT NULL,
    [SettingKey]       NVARCHAR (50)   NOT NULL,
    [TenantId]         INT             NOT NULL,
    [SettingGroupId]   INT             NOT NULL,
    [SettingSectionId] INT             NOT NULL,
    [TypeId]           INT             NOT NULL,
    [SettingValue]     NVARCHAR (MAX)  NOT NULL,
    [IsLocked]         BIT             NOT NULL,
    [IsInternalOnly]   BIT             NOT NULL,
    [Description]      NVARCHAR (1000) NULL,
    [ModifiedDate]     DATETIME        NOT NULL,
    [ModifiedBy]       NVARCHAR (50)   NOT NULL,
    CONSTRAINT [PK_AppSetting_Audit] PRIMARY KEY CLUSTERED ([AuditId] ASC)
);


GO
PRINT N'Creating [dbo].[AppSetting]...';


GO
CREATE TABLE [dbo].[AppSetting] (
    [AppSettingId]     INT             IDENTITY (1, 1) NOT NULL,
    [SettingKey]       NVARCHAR (50)   NOT NULL,
    [TenantId]         INT             NOT NULL,
    [SettingGroupId]   INT             NOT NULL,
    [SettingSectionId] INT             NOT NULL,
    [TypeId]           INT             NOT NULL,
    [SettingValue]     NVARCHAR (MAX)  NOT NULL,
    [IsLocked]         BIT             NOT NULL,
    [IsInternalOnly]   BIT             NOT NULL,
    [Description]      NVARCHAR (1000) NULL,
    [ModifiedDate]     DATETIME        NOT NULL,
    [ModifiedBy]       NVARCHAR (50)   NOT NULL,
    CONSTRAINT [PK_AppSetting] PRIMARY KEY CLUSTERED ([AppSettingId] ASC)
);


GO
PRINT N'Creating [dbo].[AppSetting].[UX_AppSetting_SettingKey_TenantIdGroupId_SectionId]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_AppSetting_SettingKey_TenantIdGroupId_SectionId]
    ON [dbo].[AppSetting]([SettingKey] ASC, [TenantId] ASC, [SettingGroupId] ASC, [SettingSectionId] ASC);


GO
PRINT N'Creating [dbo].[AppSettingSection]...';


GO
CREATE TABLE [dbo].[AppSettingSection] (
    [AppSettingSectionId] INT             IDENTITY (1, 1) NOT NULL,
    [ParentSectionId]     INT             NULL,
    [Section]             VARCHAR (50)    NOT NULL,
    [Description]         NVARCHAR (1000) NULL,
    [Ordinality]          INT             NOT NULL,
    [ModifiedDate]        DATETIME        NOT NULL,
    [ModifiedBy]          NVARCHAR (50)   NOT NULL,
    PRIMARY KEY CLUSTERED ([AppSettingSectionId] ASC)
);


GO
PRINT N'Creating [dbo].[AppSettingSection].[IX_AppSettingSection_Section_Ordinality]...';


GO
CREATE NONCLUSTERED INDEX [IX_AppSettingSection_Section_Ordinality]
    ON [dbo].[AppSettingSection]([Ordinality] ASC, [Section] ASC);


GO
PRINT N'Creating unnamed constraint on [dbo].[AppSettingType]...';


GO
ALTER TABLE [dbo].[AppSettingType]
    ADD DEFAULT (getutcdate()) FOR [ModifiedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[AppSettingType]...';


GO
ALTER TABLE [dbo].[AppSettingType]
    ADD DEFAULT (suser_sname()) FOR [ModifiedBy];


GO
PRINT N'Creating unnamed constraint on [dbo].[Tenant]...';


GO
ALTER TABLE [dbo].[Tenant]
    ADD DEFAULT (getutcdate()) FOR [ModifiedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[Tenant]...';


GO
ALTER TABLE [dbo].[Tenant]
    ADD DEFAULT (suser_sname()) FOR [ModifiedBy];


GO
PRINT N'Creating unnamed constraint on [dbo].[AppSettingGroup_Audit]...';


GO
ALTER TABLE [dbo].[AppSettingGroup_Audit]
    ADD DEFAULT (getutcdate()) FOR [ModifiedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[AppSettingGroup_Audit]...';


GO
ALTER TABLE [dbo].[AppSettingGroup_Audit]
    ADD DEFAULT (suser_sname()) FOR [ModifiedBy];


GO
PRINT N'Creating unnamed constraint on [dbo].[AppSettingSection_Audit]...';


GO
ALTER TABLE [dbo].[AppSettingSection_Audit]
    ADD DEFAULT (getutcdate()) FOR [ModifiedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[AppSettingSection_Audit]...';


GO
ALTER TABLE [dbo].[AppSettingSection_Audit]
    ADD DEFAULT (suser_sname()) FOR [ModifiedBy];


GO
PRINT N'Creating unnamed constraint on [dbo].[AppSetting_Audit]...';


GO
ALTER TABLE [dbo].[AppSetting_Audit]
    ADD DEFAULT 0 FOR [TenantId];


GO
PRINT N'Creating unnamed constraint on [dbo].[AppSetting_Audit]...';


GO
ALTER TABLE [dbo].[AppSetting_Audit]
    ADD DEFAULT 0 FOR [SettingGroupId];


GO
PRINT N'Creating unnamed constraint on [dbo].[AppSetting_Audit]...';


GO
ALTER TABLE [dbo].[AppSetting_Audit]
    ADD DEFAULT 0 FOR [SettingSectionId];


GO
PRINT N'Creating unnamed constraint on [dbo].[AppSetting_Audit]...';


GO
ALTER TABLE [dbo].[AppSetting_Audit]
    ADD DEFAULT ('') FOR [SettingValue];


GO
PRINT N'Creating unnamed constraint on [dbo].[AppSetting_Audit]...';


GO
ALTER TABLE [dbo].[AppSetting_Audit]
    ADD DEFAULT ((0)) FOR [IsLocked];


GO
PRINT N'Creating unnamed constraint on [dbo].[AppSetting_Audit]...';


GO
ALTER TABLE [dbo].[AppSetting_Audit]
    ADD DEFAULT ((0)) FOR [IsInternalOnly];


GO
PRINT N'Creating unnamed constraint on [dbo].[AppSetting_Audit]...';


GO
ALTER TABLE [dbo].[AppSetting_Audit]
    ADD DEFAULT (getutcdate()) FOR [ModifiedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[AppSetting_Audit]...';


GO
ALTER TABLE [dbo].[AppSetting_Audit]
    ADD DEFAULT (suser_sname()) FOR [ModifiedBy];


GO
PRINT N'Creating unnamed constraint on [dbo].[AppSetting]...';


GO
ALTER TABLE [dbo].[AppSetting]
    ADD DEFAULT ((0)) FOR [TenantId];


GO
PRINT N'Creating unnamed constraint on [dbo].[AppSetting]...';


GO
ALTER TABLE [dbo].[AppSetting]
    ADD DEFAULT ((0)) FOR [SettingGroupId];


GO
PRINT N'Creating unnamed constraint on [dbo].[AppSetting]...';


GO
ALTER TABLE [dbo].[AppSetting]
    ADD DEFAULT ((0)) FOR [SettingSectionId];


GO
PRINT N'Creating unnamed constraint on [dbo].[AppSetting]...';


GO
ALTER TABLE [dbo].[AppSetting]
    ADD DEFAULT ('') FOR [SettingValue];


GO
PRINT N'Creating unnamed constraint on [dbo].[AppSetting]...';


GO
ALTER TABLE [dbo].[AppSetting]
    ADD DEFAULT ((0)) FOR [IsLocked];


GO
PRINT N'Creating unnamed constraint on [dbo].[AppSetting]...';


GO
ALTER TABLE [dbo].[AppSetting]
    ADD DEFAULT ((0)) FOR [IsInternalOnly];


GO
PRINT N'Creating unnamed constraint on [dbo].[AppSetting]...';


GO
ALTER TABLE [dbo].[AppSetting]
    ADD DEFAULT (getutcdate()) FOR [ModifiedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[AppSetting]...';


GO
ALTER TABLE [dbo].[AppSetting]
    ADD DEFAULT (suser_sname()) FOR [ModifiedBy];


GO
PRINT N'Creating unnamed constraint on [dbo].[AppSettingSection]...';


GO
ALTER TABLE [dbo].[AppSettingSection]
    ADD DEFAULT 0 FOR [Ordinality];


GO
PRINT N'Creating unnamed constraint on [dbo].[AppSettingSection]...';


GO
ALTER TABLE [dbo].[AppSettingSection]
    ADD DEFAULT (getutcdate()) FOR [ModifiedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[AppSettingSection]...';


GO
ALTER TABLE [dbo].[AppSettingSection]
    ADD DEFAULT (suser_sname()) FOR [ModifiedBy];


GO
PRINT N'Creating [dbo].[FK_AppSetting_AppSettingSection]...';


GO
ALTER TABLE [dbo].[AppSetting]
    ADD CONSTRAINT [FK_AppSetting_AppSettingSection] FOREIGN KEY ([SettingSectionId]) REFERENCES [dbo].[AppSettingSection] ([AppSettingSectionId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_AppSetting_AppSettingType]...';


GO
ALTER TABLE [dbo].[AppSetting]
    ADD CONSTRAINT [FK_AppSetting_AppSettingType] FOREIGN KEY ([TypeId]) REFERENCES [dbo].[AppSettingType] ([AppSettingTypeId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_AppSetting_Tenant]...';


GO
ALTER TABLE [dbo].[AppSetting]
    ADD CONSTRAINT [FK_AppSetting_Tenant] FOREIGN KEY ([TenantId]) REFERENCES [dbo].[Tenant] ([TenantId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_AppSettingSection_AppSettingSection]...';


GO
ALTER TABLE [dbo].[AppSettingSection]
    ADD CONSTRAINT [FK_AppSettingSection_AppSettingSection] FOREIGN KEY ([ParentSectionId]) REFERENCES [dbo].[AppSettingSection] ([AppSettingSectionId]);


GO
PRINT N'Creating [dbo].[Trigger_AppSetting_Audit]...';


GO


CREATE TRIGGER [dbo].[Trigger_AppSetting_Audit]
    ON [dbo].[AppSetting]
    FOR DELETE, UPDATE
    AS
    BEGIN
        SET NoCount ON;
		INSERT INTO dbo.AppSetting_Audit ([AppSettingId],[SettingKey],[TenantId],[SettingGroupId],[SettingSectionId],[TypeId],[SettingValue],[IsLocked], [IsInternalOnly], [Description], [ModifiedDate], [ModifiedBy])
		SELECT [AppSettingId],[SettingKey],[TenantId],[SettingGroupId],[SettingSectionId],[TypeId],[SettingValue],[IsLocked], [IsInternalOnly], [Description], [ModifiedDate], [ModifiedBy] FROM deleted
    END
GO
PRINT N'Creating [dbo].[Trigger_AppSettingSection_Audit]...';


GO

CREATE TRIGGER [dbo].[Trigger_AppSettingSection_Audit]
    ON [dbo].[AppSettingSection]
    FOR DELETE, UPDATE
    AS
    BEGIN
        SET NoCount ON;
		INSERT INTO dbo.AppSettingSection_Audit ([AppSettingSectionId],[ParentSectionId],[Section],[Description],[ModifiedDate], [ModifiedBy])
		SELECT [AppSettingSectionId],[ParentSectionId],[Section],[Description],[ModifiedDate],[ModifiedBy] FROM deleted
    END
GO
PRINT N'Creating [dbo].[GetParentAppSettingSections]...';


GO
--Returns the list of Parent Group Ids for a given Group Id
CREATE FUNCTION [dbo].[GetParentAppSettingSections] 
(    
    @AppSettingSectionId INT
)
RETURNS @Result TABLE  ([Id] INT, [ParentSectionId] INT)
AS
    BEGIN

    WITH Result ([Id],[ParentSectionId])
    AS
    (
        SELECT [AppSettingSectionId],[ParentSectionId]
        FROM [dbo].[AppSettingSection] 
        WHERE [AppSettingSectionId] = @AppSettingSectionId
        UNION ALL
        SELECT S.[AppSettingSectionId], S.[ParentSectionId] FROM [dbo].[AppSettingSection] S
        INNER JOIN Result R ON S.[AppSettingSectionId] = R.[ParentSectionId]
    )
    INSERT INTO @Result
    SELECT [Id],[ParentSectionId]
    FROM Result

    RETURN
	  
END
GO
PRINT N'Creating [dbo].[GetChildAppSettingSections]...';


GO
--Returns the list of Child Section Ids for a given Section Id
CREATE FUNCTION [dbo].[GetChildAppSettingSections]
(
    @AppSettingSectionId INT
)
RETURNS @Result TABLE ([Id] INT, [ParentSectionId] INT) AS BEGIN


    WITH Result ([AppSettingSectionId], [ParentSectionId])
    AS
    (
        SELECT [AppSettingSectionId], [ParentSectionId]
        FROM [dbo].[AppSettingSection]
        WHERE [AppSettingSectionId] = @AppSettingSectionId
        UNION ALL
        SELECT S.[AppSettingSectionId], S.[ParentSectionId] FROM [dbo].[AppSettingSection] S
        INNER JOIN Result R ON S.[ParentSectionId] = R.[AppSettingSectionId]
    )
    INSERT INTO @Result
    SELECT [AppSettingSectionId], [ParentSectionId]
    FROM Result

    RETURN

END
GO
PRINT N'Creating [dbo].[ClearDownAuditTables]...';


GO
-- =============================================
-- Author:		Nicholas Rogoff
-- Create date: 07/09/2015
-- Description:	Clears down the Audit tables
-- =============================================
CREATE PROCEDURE ClearDownAuditTables 
	-- Add the parameters for the stored procedure here
	@keep_months int = 6
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @audit_table_name NVARCHAR(255);
	DECLARE @sql NVARCHAR(4000)

    -- Get list of Audit Tables
	DECLARE audit_tables_cursor CURSOR
	FOR
	select [name] from [sys].[tables] where sys.tables.[name] like '%_Audit' and sys.tables.[type] = 'U';

	OPEN audit_tables_cursor;
	
	--Fetch first
	FETCH NEXT FROM audit_tables_cursor INTO @audit_table_name

	WHILE @@FETCH_STATUS = 0
	BEGIN

		SELECT @sql = 'DELETE FROM [dbo].[' + @audit_table_name + '] WHERE [ModifiedDate] < DATEADD(month,-' + CAST(@keep_months AS NVARCHAR) + ', SYSUTCDATETIME())';
		EXEC(@sql);
		--get next row
		FETCH NEXT FROM audit_tables_cursor INTO @audit_table_name;
	END
	CLOSE audit_tables_cursor;
	
	DEALLOCATE audit_tables_cursor;

END
GO
PRINT N'Creating [dbo].[CreateNewAppSettingsSet]...';


GO
-- =============================================
-- Author:		Nicholas Rogoff
-- Create date: 07/05/2016
-- Description:	Creates a base set of AppSettings for a new Tenant based on an existing Tenant
-- =============================================
CREATE PROCEDURE CreateNewAppSettingsSet 
	-- Add the parameters for the stored procedure here
	@NewTenantId int = 0, 
	@TemplateTenantId int = 0 --copy settings from
AS
BEGIN

	IF (@NewTenantId IS NULL OR @NewTenantId=0)
		BEGIN
			PRINT 'ERROR: You must supply a NewTenantId other than zero.'
			RETURN(1)
		END
	IF (@TemplateTenantId IS NULL OR @TemplateTenantId=0)
		BEGIN
			PRINT 'ERROR: You must supply a TemplateTenantId other than zero.'
			RETURN(1)
		END
	
	IF (SELECT COUNT(*) FROM [dbo].[Tenant]
		WHERE [TenantId] = @NewTenantId) = 0
		BEGIN
			PRINT 'ERROR: New Tenant does not exist in Tenant table.'
			RETURN(1)
		END

	IF (SELECT COUNT(*) FROM [dbo].[Tenant]
		WHERE [TenantId] = @TemplateTenantId) = 0
		BEGIN
			PRINT 'ERROR: Template Tenant does not exist in Tenant table.'
			RETURN(1)
		END


	INSERT INTO [dbo].[AppSetting]
           ([SettingKey]
           ,[TenantId]
           ,[SettingValue]
           ,[SettingGroupId]
           ,[SettingSectionId]
           ,[TypeId]
           ,[IsLocked]
           ,[IsInternalOnly]
           ,[Description]
           ,[ModifiedDate]
           ,[ModifiedBy])   
	SELECT [SettingKey]
           ,@NewTenantId
           ,'!! TO BE CONFIGURED !!'
           ,[SettingGroupId]
           ,[SettingSectionId]
           ,[TypeId]
           ,[IsLocked]
           ,[IsInternalOnly]
           ,[Description]
           ,GETUTCDATE()
           ,SUSER_NAME()
	FROM [dbo].[AppSetting]
	WHERE [TenantId]=@TemplateTenantId

-- Check for SQL Server errors.
IF @@ERROR <> 0 
   BEGIN
      RETURN(2)
   END
ELSE
   BEGIN
     -- SUCCESS!!
	 RETURN(0)
   END
END
GO
PRINT N'Creating [dbo].[GetParentAppSettingGroups]...';


GO
--Returns the list of Parent Group Ids for a given Group Id
CREATE FUNCTION [dbo].[GetParentAppSettingGroups] 
(    
    @AppSettingGroupId INT
)
RETURNS @Result TABLE  ([Id] INT, [ParentGroupId] INT)
AS
    BEGIN

    WITH Result ([Id],[ParentGroupId])
    AS
    (
        SELECT [AppSettingGroupId],[ParentGroupId]
        FROM [dbo].[AppSettingGroup] 
        WHERE [AppSettingGroupId] = @AppSettingGroupId
        UNION ALL
        SELECT G.[AppSettingGroupId], G.[ParentGroupId] FROM [dbo].[AppSettingGroup] G
        INNER JOIN Result R ON G.[AppSettingGroupId] = R.[ParentGroupId]
    )
    INSERT INTO @Result
    SELECT [Id],[ParentGroupId]
    FROM Result

    RETURN
	  
END
GO
PRINT N'Creating [dbo].[GetChildAppSettingGroups]...';


GO
--Returns the list of Child Group Ids for a given Group Id
CREATE FUNCTION [dbo].[GetChildAppSettingGroups]
(
    @AppSettingGroupId INT
)
RETURNS @Result TABLE ([Id] INT, [ParentGroupId] INT) AS BEGIN


    WITH Result ([AppSettingGroupId], [ParentGroupId])
    AS
    (
        SELECT [AppSettingGroupId], [ParentGroupId]
        FROM [dbo].[AppSettingGroup]
        WHERE [AppSettingGroupId] = @AppSettingGroupId
        UNION ALL
        SELECT G.[AppSettingGroupId], G.[ParentGroupId] FROM [dbo].[AppSettingGroup] G
        INNER JOIN Result R ON G.[ParentGroupId] = R.[AppSettingGroupId]
    )
    INSERT INTO @Result
    SELECT [AppSettingGroupId], [ParentGroupId]
    FROM Result

    RETURN

END
GO
PRINT N'Creating [dbo].[GetGroupPath]...';


GO
-- =============================================
-- Author:		Nicholas Rogoff
-- Create date: 01/02/2017
-- Description:	Function that generates the Group Path Name in the format \{grandparent}\{parent}\{child}
-- =============================================
CREATE FUNCTION GetGroupPath 
(	
	-- Add the parameters for the function here
	@AppSettingGroupId INT
)
RETURNS NVARCHAR(1000) 
AS
BEGIN
	-- Declare the return variable here
	DECLARE @groupPath AS NVARCHAR(1000)

	-- Add the T-SQL statements to compute the return value here
	DECLARE @GroupName AS NVARCHAR(50)

	DECLARE ITEM_CURSOR CURSOR SCROLL READ_ONLY STATIC
	FOR	SELECT g.[Group] FROM [dbo].[GetParentAppSettingGroups] (@AppSettingGroupId) gid
		left join [dbo].[AppSettingGroup] g on gid.Id = g.AppSettingGroupId

	OPEN ITEM_CURSOR

	FETCH LAST FROM ITEM_CURSOR INTO @GroupName
	WHILE @@FETCH_STATUS = 0
		BEGIN
			SET @groupPath = CONCAT(@groupPath,'\',@GroupName)
			FETCH PRIOR FROM ITEM_CURSOR INTO @GroupName
		END
	CLOSE ITEM_CURSOR 
	DEALLOCATE ITEM_CURSOR

	-- Return the result of the function
	RETURN @groupPath

END
GO
PRINT N'Creating [dbo].[AppSettingGroup]...';


GO
CREATE TABLE [dbo].[AppSettingGroup] (
    [AppSettingGroupId] INT             IDENTITY (1, 1) NOT NULL,
    [ParentGroupId]     INT             NULL,
    [Group]             VARCHAR (50)    NOT NULL,
    [Description]       NVARCHAR (1000) NULL,
    [GroupPath]         AS              ([dbo].[GetGroupPath]([AppSettingGroupId])),
    [ModifiedDate]      DATETIME        NOT NULL,
    [ModifiedBy]        NVARCHAR (50)   NOT NULL,
    PRIMARY KEY CLUSTERED ([AppSettingGroupId] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[AppSettingGroup]...';


GO
ALTER TABLE [dbo].[AppSettingGroup]
    ADD DEFAULT (getutcdate()) FOR [ModifiedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[AppSettingGroup]...';


GO
ALTER TABLE [dbo].[AppSettingGroup]
    ADD DEFAULT (suser_sname()) FOR [ModifiedBy];


GO
PRINT N'Creating [dbo].[FK_AppSetting_AppSettingGroup]...';


GO
ALTER TABLE [dbo].[AppSetting]
    ADD CONSTRAINT [FK_AppSetting_AppSettingGroup] FOREIGN KEY ([SettingGroupId]) REFERENCES [dbo].[AppSettingGroup] ([AppSettingGroupId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_AppSettingGroup_AppSettingGroup]...';


GO
ALTER TABLE [dbo].[AppSettingGroup]
    ADD CONSTRAINT [FK_AppSettingGroup_AppSettingGroup] FOREIGN KEY ([ParentGroupId]) REFERENCES [dbo].[AppSettingGroup] ([AppSettingGroupId]);


GO
PRINT N'Creating [dbo].[Trigger_AppSettingGroup_Audit]...';


GO

CREATE TRIGGER [dbo].[Trigger_AppSettingGroup_Audit]
    ON [dbo].[AppSettingGroup]
    FOR DELETE, UPDATE
    AS
    BEGIN
        SET NoCount ON;
		INSERT INTO dbo.AppSettingGroup_Audit ([AppSettingGroupId],[ParentGroupId],[Group],[Description],[ModifiedDate], [ModifiedBy])
		SELECT [AppSettingGroupId],[ParentGroupId],[Group],[Description],[ModifiedDate], [ModifiedBy] FROM deleted
    END
GO

--Post-Deployment Script Template							
----------------------------------------------------------------------------------------
-- This file contains SQL statements that will be appended to the build script.		
-- Use SQLCMD syntax to include a file in the post-deployment script.			
-- Example:      :r .\myfile.sql								
-- Use SQLCMD syntax to reference a variable in the post-deployment script.		
-- Example:      :setvar TableName MyTable							
--               SELECT * FROM [$(TableName)]					
----------------------------------------------------------------------------------------

INSERT INTO [dbo].[AppSettingType](
	[AppSettingType], 
    [AppSettingTypeDescription])
VALUES
	('TEXT','Text Content'),
	('INTEGER', 'Integer (whole number) only'),
	('DECIMAL','Numbers that are not integers'),
	('BOOL', 'Boolean content (true = 1, false = 0)'),
	('CSV','Comma Seperated List. Use double quotes for fields that require it.'),
	('HMTL','HTML Content'),
	('JSON','JSON Content'),
	('XML','XML Content')
GO

SET IDENTITY_INSERT [dbo].[AppSettingSection] ON
GO
INSERT INTO [dbo].[AppSettingSection](
	[AppSettingSectionId],
	[Section],
	[Description])
VALUES
	(0, 'General','Platform general settings')
GO
SET IDENTITY_INSERT [dbo].[AppSettingSection] OFF
GO

SET IDENTITY_INSERT [dbo].[AppSettingGroup] ON
GO
INSERT INTO [dbo].[AppSettingGroup](
	[AppSettingGroupId],
	[Group],
	[Description])
VALUES
	(0, 'Core', 'Settings apply to ALL consumers and is the root of all inherited settings.')
GO
SET IDENTITY_INSERT [dbo].[AppSettingGroup] OFF
GO

SET IDENTITY_INSERT [dbo].[Tenant] ON
GO
INSERT INTO [dbo].[Tenant](
	[TenantId],[TenantName],[TenantCode],[TenantDescription])
	VALUES
		(0,'Platform','PLATFORM','Applies to all tenants')
GO
SET IDENTITY_INSERT [dbo].[Tenant] OFF
GO

INSERT INTO [dbo].[AppSetting](
	[SettingKey],
	[SettingGroupId],
	[SettingSectionId],
	[TypeId],
	[TenantId],
	[SettingValue],
	[Description])
VALUES
	('TestSetting',0,0,1,0,'This is a test text setting value','Description: Remove this test setting')
GO

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
