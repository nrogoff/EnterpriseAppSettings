// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace hms.entappsettings.webapi.clientsdk
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for AppSettingGroups.
    /// </summary>
    public static partial class AppSettingGroupsExtensions
    {
            /// <summary>
            /// Returns the App Setting Groups details for a single group Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appSettingGroupId'>
            /// </param>
            public static AppSettingGroupDTO GetAppSettingGroup(this IAppSettingGroups operations, int appSettingGroupId)
            {
                return Task.Factory.StartNew(s => ((IAppSettingGroups)s).GetAppSettingGroupAsync(appSettingGroupId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the App Setting Groups details for a single group Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appSettingGroupId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppSettingGroupDTO> GetAppSettingGroupAsync(this IAppSettingGroups operations, int appSettingGroupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppSettingGroupWithHttpMessagesAsync(appSettingGroupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// RESTRICTED: Delete an App Setting Group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appSettingGroupId'>
            /// </param>
            public static AppSettingGroupDTO DeleteAppSettingGroup(this IAppSettingGroups operations, int appSettingGroupId)
            {
                return Task.Factory.StartNew(s => ((IAppSettingGroups)s).DeleteAppSettingGroupAsync(appSettingGroupId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// RESTRICTED: Delete an App Setting Group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appSettingGroupId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppSettingGroupDTO> DeleteAppSettingGroupAsync(this IAppSettingGroups operations, int appSettingGroupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAppSettingGroupWithHttpMessagesAsync(appSettingGroupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the App Setting Groups details for a given Group Path
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupPath'>
            /// The groups path in the format
            /// '\\\\Core\\\\Grandparent\\\\Parent\\\\Child'. MUST be URL encoded e.g.
            /// %5CCore%5CGrandParent%5CParent
            /// </param>
            public static AppSettingGroupDTO GetAppSettingGroupByPath(this IAppSettingGroups operations, string groupPath)
            {
                return Task.Factory.StartNew(s => ((IAppSettingGroups)s).GetAppSettingGroupByPathAsync(groupPath), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the App Setting Groups details for a given Group Path
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupPath'>
            /// The groups path in the format
            /// '\\\\Core\\\\Grandparent\\\\Parent\\\\Child'. MUST be URL encoded e.g.
            /// %5CCore%5CGrandParent%5CParent
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppSettingGroupDTO> GetAppSettingGroupByPathAsync(this IAppSettingGroups operations, string groupPath, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppSettingGroupByPathWithHttpMessagesAsync(groupPath, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// RESTRICTED: Update an existing App Setting Group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='appSettingGroupDTO'>
            /// </param>
            public static void PutAppSettingGroup(this IAppSettingGroups operations, int id, AppSettingGroupDTO appSettingGroupDTO)
            {
                Task.Factory.StartNew(s => ((IAppSettingGroups)s).PutAppSettingGroupAsync(id, appSettingGroupDTO), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// RESTRICTED: Update an existing App Setting Group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='appSettingGroupDTO'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutAppSettingGroupAsync(this IAppSettingGroups operations, int id, AppSettingGroupDTO appSettingGroupDTO, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PutAppSettingGroupWithHttpMessagesAsync(id, appSettingGroupDTO, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Returns all the App Setting Groups
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<AppSettingGroupDTO> GetAppSettingGroups(this IAppSettingGroups operations)
            {
                return Task.Factory.StartNew(s => ((IAppSettingGroups)s).GetAppSettingGroupsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all the App Setting Groups
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AppSettingGroupDTO>> GetAppSettingGroupsAsync(this IAppSettingGroups operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppSettingGroupsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// RESTRICTED: Add an App Setting Group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appSettingGroupDTO'>
            /// </param>
            public static AppSettingGroupDTO PostAppSettingGroup(this IAppSettingGroups operations, AppSettingGroupDTO appSettingGroupDTO)
            {
                return Task.Factory.StartNew(s => ((IAppSettingGroups)s).PostAppSettingGroupAsync(appSettingGroupDTO), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// RESTRICTED: Add an App Setting Group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appSettingGroupDTO'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppSettingGroupDTO> PostAppSettingGroupAsync(this IAppSettingGroups operations, AppSettingGroupDTO appSettingGroupDTO, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostAppSettingGroupWithHttpMessagesAsync(appSettingGroupDTO, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
