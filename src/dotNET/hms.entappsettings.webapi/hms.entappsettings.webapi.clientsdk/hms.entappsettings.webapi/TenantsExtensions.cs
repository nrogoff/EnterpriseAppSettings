// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace hms.entappsettings.webapi.clientsdk
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Tenants.
    /// </summary>
    public static partial class TenantsExtensions
    {
            /// <summary>
            /// Get tenant details by tenantId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static TenantDTO GetTenant(this ITenants operations, int id)
            {
                return Task.Factory.StartNew(s => ((ITenants)s).GetTenantAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get tenant details by tenantId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TenantDTO> GetTenantAsync(this ITenants operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTenantWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a Tenant
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The TenantId
            /// </param>
            public static TenantDTO DeleteTenant(this ITenants operations, int id)
            {
                return Task.Factory.StartNew(s => ((ITenants)s).DeleteTenantAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a Tenant
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The TenantId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TenantDTO> DeleteTenantAsync(this ITenants operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteTenantWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an existing Tenant
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='tenantDTO'>
            /// </param>
            public static void PutTenant(this ITenants operations, int tenantId, TenantDTO tenantDTO)
            {
                Task.Factory.StartNew(s => ((ITenants)s).PutTenantAsync(tenantId, tenantDTO), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an existing Tenant
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='tenantDTO'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutTenantAsync(this ITenants operations, int tenantId, TenantDTO tenantDTO, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PutTenantWithHttpMessagesAsync(tenantId, tenantDTO, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Returns all Tenants
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetTenants(this ITenants operations)
            {
                return Task.Factory.StartNew(s => ((ITenants)s).GetTenantsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all Tenants
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTenantsAsync(this ITenants operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTenantsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add an Tenant
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantDTO'>
            /// The new tenant DTO
            /// </param>
            public static TenantDTO PostTenant(this ITenants operations, TenantDTO tenantDTO)
            {
                return Task.Factory.StartNew(s => ((ITenants)s).PostTenantAsync(tenantDTO), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add an Tenant
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantDTO'>
            /// The new tenant DTO
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TenantDTO> PostTenantAsync(this ITenants operations, TenantDTO tenantDTO, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostTenantWithHttpMessagesAsync(tenantDTO, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
