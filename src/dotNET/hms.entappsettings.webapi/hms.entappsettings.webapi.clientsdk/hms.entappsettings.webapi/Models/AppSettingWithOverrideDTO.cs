// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace hms.entappsettings.webapi.clientsdk.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// AppSetting with overridden indicator. Used in the management UI to
    /// highlight or dim entries
    /// </summary>
    public partial class AppSettingWithOverrideDTO
    {
        /// <summary>
        /// Initializes a new instance of the AppSettingWithOverrideDTO class.
        /// </summary>
        public AppSettingWithOverrideDTO() { }

        /// <summary>
        /// Initializes a new instance of the AppSettingWithOverrideDTO class.
        /// </summary>
        public AppSettingWithOverrideDTO(string settingKey, int tenantId, string settingGroupId, string settingSectionId, string typeId, bool? overridden = default(bool?), int? appSettingId = default(int?), string groupPath = default(string), string settingValue = default(string), bool? isLocked = default(bool?), bool? isInternalOnly = default(bool?), string description = default(string), DateTime? modifiedDate = default(DateTime?), string modifiedBy = default(string))
        {
            Overridden = overridden;
            AppSettingId = appSettingId;
            SettingKey = settingKey;
            TenantId = tenantId;
            SettingGroupId = settingGroupId;
            GroupPath = groupPath;
            SettingSectionId = settingSectionId;
            TypeId = typeId;
            SettingValue = settingValue;
            IsLocked = isLocked;
            IsInternalOnly = isInternalOnly;
            Description = description;
            ModifiedDate = modifiedDate;
            ModifiedBy = modifiedBy;
        }

        /// <summary>
        /// Has this setting been overridden by one at a high level
        /// </summary>
        [JsonProperty(PropertyName = "Overridden")]
        public bool? Overridden { get; set; }

        /// <summary>
        /// The setting Id
        /// </summary>
        [JsonProperty(PropertyName = "AppSettingId")]
        public int? AppSettingId { get; set; }

        /// <summary>
        /// Setting Key
        /// </summary>
        [JsonProperty(PropertyName = "SettingKey")]
        public string SettingKey { get; set; }

        /// <summary>
        /// Tenant Id. Zero indicates that this setting applies to all
        /// affiliates unless overridden
        /// </summary>
        [JsonProperty(PropertyName = "TenantId")]
        public int TenantId { get; set; }

        /// <summary>
        /// The group that this setting applies to. Each client is will be
        /// interested in the settings contained in a group and it's parent
        /// groups
        /// </summary>
        [JsonProperty(PropertyName = "SettingGroupId")]
        public string SettingGroupId { get; set; }

        /// <summary>
        /// The group path
        /// </summary>
        [JsonProperty(PropertyName = "GroupPath")]
        public string GroupPath { get; set; }

        /// <summary>
        /// The setting UI section
        /// </summary>
        [JsonProperty(PropertyName = "SettingSectionId")]
        public string SettingSectionId { get; set; }

        /// <summary>
        /// The type of setting value. e.g. HTML, TEXT,. Possible values
        /// include: 'TEXT', 'INTEGER', 'DECIMAL', 'BOOL', 'CSV', 'HTML',
        /// 'JSON', 'XML'
        /// </summary>
        [JsonProperty(PropertyName = "TypeId")]
        public string TypeId { get; set; }

        /// <summary>
        /// The setting value.
        /// </summary>
        [JsonProperty(PropertyName = "SettingValue")]
        public string SettingValue { get; set; }

        /// <summary>
        /// Indicates that this setting can not be edited in the DCR Admin UI
        /// </summary>
        [JsonProperty(PropertyName = "IsLocked")]
        public bool? IsLocked { get; set; }

        /// <summary>
        /// Indicates that this setting should be hidden to all public
        /// requests.
        /// </summary>
        [JsonProperty(PropertyName = "IsInternalOnly")]
        public bool? IsInternalOnly { get; set; }

        /// <summary>
        /// Description of the App Setting
        /// </summary>
        [JsonProperty(PropertyName = "Description")]
        public string Description { get; set; }

        /// <summary>
        /// Last modified date and time
        /// </summary>
        [JsonProperty(PropertyName = "ModifiedDate")]
        public DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// Modified by
        /// </summary>
        [JsonProperty(PropertyName = "ModifiedBy")]
        public string ModifiedBy { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (SettingKey == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SettingKey");
            }
            if (SettingGroupId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SettingGroupId");
            }
            if (SettingSectionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SettingSectionId");
            }
            if (TypeId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TypeId");
            }
            if (this.SettingKey != null)
            {
                if (this.SettingKey.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "SettingKey", 50);
                }
                if (this.SettingKey.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "SettingKey", 0);
                }
            }
            if (this.Description != null)
            {
                if (this.Description.Length > 1000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Description", 1000);
                }
                if (this.Description.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Description", 0);
                }
            }
            if (this.ModifiedBy != null)
            {
                if (this.ModifiedBy.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ModifiedBy", 50);
                }
                if (this.ModifiedBy.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ModifiedBy", 0);
                }
            }
        }
    }
}
